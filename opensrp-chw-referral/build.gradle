plugins {
  id 'com.android.library'
  id 'org.jetbrains.kotlin.android'
  id 'jacoco'
}

jacoco { toolVersion = '0.8.10' }

android {
  namespace 'org.smartregister.chw.referral'
  compileSdk 35
  buildToolsVersion '35.0.0'

  buildFeatures { buildConfig true; viewBinding true }

  compileOptions { sourceCompatibility JavaVersion.VERSION_1_8; targetCompatibility JavaVersion.VERSION_1_8 }
  // Keep Kotlin target aligned with Java target to avoid AGP/KGP validation errors
  kotlinOptions { jvmTarget = '1.8' }

  defaultConfig {
    minSdk 28
    targetSdk 35
    versionCode Integer.parseInt(project.VERSION_CODE)
    versionName project.VERSION_NAME
    multiDexEnabled true
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    consumerProguardFiles 'consumer-rules.pro'
  }

  buildTypes {
    release { minifyEnabled false; proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' }
    debug   { debuggable true }
  }

  lint { abortOnError false }

  packaging { resources { excludes += [
    'LICENSE.txt','META-INF/LICENSE','META-INF/LICENSE.txt','META-INF/license.txt','META-INF/NOTICE.txt','META-INF/notice.txt','META-INF/ASL2.0','META-INF/INDEX.LIST','org/apache/http/version.properties','org/apache/http/client/version.properties'
  ] } }

  testOptions {
    unitTests {
      includeAndroidResources = true
      all {
        jvmArgs '-Xmx1024m'
        jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.net=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.text=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.security=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/sun.security.util=ALL-UNNAMED'
        jvmArgs '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED'
        jvmArgs '--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED'
        systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
        systemProperty 'robolectric.enabledSdks', '28'
      }
    }
    animationsDisabled = true
  }
}

tasks.withType(Test).configureEach {
  jacoco { includeNoLocationClasses = true; excludes = ['jdk.internal.*'] }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  // Core OpenSRP and related
  implementation('io.github.bluecodesystems:opensrp-client-core:6.2.2') { transitive = true }
  implementation('com.github.BlueCodeSystems:android-p2p-sync:v0.4.3') { transitive = true }
  implementation('com.github.BlueCodeSystems:opensrp-client-configurable-views:v2.0.1') { transitive = true }
  // Neat Form from JitPack
  api 'com.github.BlueCodeSystems:neat-form:v1.1.6'
  // Plan Evaluator provides domain classes like PhysicalLocation, Task
  api 'io.github.bluecodesystems:opensrp-plan-evaluator:1.7.0'

  // AndroidX widgets (modern)
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'androidx.recyclerview:recyclerview:1.3.2'
  implementation 'com.google.android.material:material:1.12.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'androidx.multidex:multidex:2.0.1'
  implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
  implementation 'androidx.core:core-ktx:1.13.1'

  implementation 'com.google.code.reflection-utils:reflection-utils:0.0.1'
  implementation 'com.rengwuxian.materialedittext:library:2.1.4'
  implementation 'com.google.code.gson:gson:2.10.1'
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-text:1.10.0'
  implementation 'de.hdodenhof:circleimageview:3.1.0'
  implementation 'com.google.guava:guava:20.0'
  // If needed, add Compressor back with a Central-hosted version.
  implementation 'com.wdullaer:materialdatetimepicker:3.6.4'

  // Koin 3.x (we updated imports to KoinComponent from org.koin.core.component.*)
  implementation "io.insert-koin:koin-android:3.5.6"

  // Unit test
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.robolectric:robolectric:4.10.3'
  testImplementation 'androidx.test:core:1.5.0'
  testImplementation 'org.mockito:mockito-core:4.8.1'
  testImplementation 'org.mockito:mockito-inline:4.8.1'
  testImplementation 'org.json:json:20231013'
  testImplementation 'io.mockk:mockk:1.9.3'
  testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2'
  testImplementation 'com.agoda.kakao:kakao:2.2.0'
  testImplementation 'androidx.arch.core:core-testing:2.1.0'

  // Instrumentation
  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
  androidTestImplementation 'androidx.test:runner:1.5.2'

  annotationProcessor 'androidx.lifecycle:lifecycle-common-java8:2.2.0'
}

// Jacoco report (modern DSL)
tasks.register('jacocoTestReport', JacocoReport) {
  dependsOn 'testDebugUnitTest'
  reports {
    xml.required = true; html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml")
    html.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/html")
  }
  def fileFilter = ['**/R.class','**/R$*.class','**/BuildConfig.*','**/Manifest*.*','**/*Test*.*','android/**/*.*','**/*$ViewBinder*.*']
  def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
  def mainSrc = "$project.projectDir/src/main/java"
  sourceDirectories.setFrom(files([mainSrc]))
  classDirectories.setFrom(files([debugTree]))
  executionData.setFrom(fileTree(dir: buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec']))
}

apply from: '../maven.gradle'
